{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ComponentErrorBoundary.js","Container/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","robots","map","user","index","key","SearchBox","SearchField","SearchInputChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","event","SearchInput","target","value","fetch","then","Response","json","users","filteredRobot","filter","item","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gOAiBeA,EAfH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,GAAGC,EAAS,EAATA,MAErB,OACG,yBAAKC,UAAU,wDAEb,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,WACpD,6BACC,4BAAKL,GACJ,2BAAIE,MCUGI,EAhBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEb,OACI,6BACHA,EAAOC,KAAI,SAACC,EAAKC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACdV,KAAMO,EAAOG,GAAOV,KACpBC,GAAIM,EAAOG,GAAOT,GAClBC,MAAOK,EAAOG,GAAOR,aCAlBU,EAVC,SAAC,GAAkC,EAAjCC,YAAkC,IAAtBC,EAAqB,EAArBA,kBAC1B,OACI,yBAAKX,UAAU,OACf,2BAAOA,UAAU,mCACjBY,KAAK,SAASC,YAAY,gBACtBC,SAAUH,MCEPI,G,MARF,SAACC,GACV,OACI,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAO,kBAAmBC,OAAO,UAC7DJ,EAAMK,YCkBJC,E,kDAlBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SACJ,6DAEJG,KAAKX,MAAMK,a,GAhBEQ,aC8CbC,E,kDAzCf,aAAc,IAAD,8BACT,gBAOJnB,kBAAkB,SAACoB,GACjB,EAAKH,SAAS,CAACI,YAAaD,EAAME,OAAOC,SAPvC,EAAKX,MAAM,CACPnB,OAAQ,GACR4B,YAAa,IAJR,E,gEAYO,IAAD,OACfG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAC7DA,EAASC,UACXF,MAAK,SAAAG,GAAK,OACR,EAAKX,SAAS,CAACxB,OAAQmC,S,+BAMlB,IAAD,OACEC,EAAcb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAAAC,GAC7C,OAAOA,EAAK7C,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMS,YAAYW,kBAG/D,OACI,yBAAK3C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,kBAAmBgB,KAAKhB,oBACnC,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUP,OAAQoC,W,GAlCZX,a,MCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.6b0b560c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({name,id,email})=>{\r\n  \r\n\treturn(\r\n    <div className='tc bg-light-green dib br3 pa2  ma2 grow bw1 shadow-5'>\r\n    \r\n      <img src={`https://robohash.org/${id}?150*150`} alt='Robots' />\r\n      <div>\r\n      \t<h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\n\r\nconst CardList=({robots})=>{\r\n\r\n    return(\r\n        <div>\r\n{    robots.map((user,index)=>{\r\n        return <Card key={index}\r\n            name={robots[index].name} \r\n            id={robots[index].id} \r\n            email={robots[index].email}/>\r\n\r\n            })\r\n  \r\n    \r\n}\r\n</div>)}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({SearchField,SearchInputChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' placeholder='Search Robots'\r\n            onChange={SearchInputChange}\r\n        />\r\n        </div>\r\n    )\r\n};\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll=(props)=>{\r\n    return (\r\n        <div style={{overflowY: 'scroll',border:'5px solid black' ,height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n\r\n    }\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Oooops ! Something went wrong</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React,{Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ComponentErrorBoundary'\r\n\r\nclass App extends Component {\r\nconstructor(){\r\n    super();\r\n    this.state={\r\n        robots: [],\r\n        SearchInput: ''\r\n    }\r\n}\r\n\r\nSearchInputChange=(event)=>{\r\n  this.setState({SearchInput: event.target.value})\r\n}\r\n\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(Response=>\r\n        Response.json()\r\n    ).then(users=>\r\n        this.setState({robots: users}))\r\n    \r\n}\r\n\r\n\r\n\r\n    render(){\r\n        const filteredRobot=this.state.robots.filter(item=>{\r\n        return item.name.toLowerCase().includes(this.state.SearchInput.toLowerCase())})\r\n\r\n\r\n        return(\r\n            <div className='tc'>\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n            <SearchBox SearchInputChange={this.SearchInputChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n            <CardList robots={filteredRobot}/>\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n          );\r\n    \r\n}}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}